{
  "hash": "fe722498b3066a971155ce26cf4bff07",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 7\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"MATH 313: Survey Design and Sampling\"\nauthor: \"Bastola\"\nformat:\n  revealjs:\n    html-math-method: mathjax\n    mathjax-url: \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js\"\n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: \n      src: chalkboard.json\n      eraser:\n        src: 'img/sponge.png'\n        radius: 20\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n\n## Simple Random Sampling\n\n<br>\n\n::: {.callout-note title=\"Definition\"}\n\nIf a sample of size $n$ is drawn from a population of size $N$ such that\nevery possible sample of size $n$ has the same chance of being selected,\nthen the sampling procedure is called **simple random sampling**. The sample thus obtained is called a **simple random sample**.\n\n:::\n\n## How to Draw a Simple Random Sample\n\n::: cle2\n::: font80\n\nTo draw a simple random sample, number every item $(1, 2, \\ldots, N)$ in the population and select a list of $n$ non-repeated random numbers within $1, 2, \\ldots, N$. \n\n- In the lab, we saw how to generate such a list using **R**. \n- We can also use a random number table (textbook Appendix A, Table A.2).\n\n:::\n:::\n\n## \n\n<div style=\"text-align: center;\">\n  <img src=\"images/random_table.png\" alt=\"Random Table\">\n</div>\n\n\n##\n\n::: font60\n> Example 1: Use the random number table, select a random sample with size 5 from a population with $N=20$. use the rightmost digit on the $15^{th}$ line and $9^{th}$ column as the starting point.\n:::\n\n\n## \n\n::: font60\n> Example 2: Use the random number table, select a random sample with size 10 from the list of States in U.S.A. Use the last two digit on the $10^{th}$ line and $9^{th}$ column as the starting point.\n:::\n\n\n##\n\n::: font60\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-f82883e6d04b83d303d1\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f82883e6d04b83d303d1\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1. Alabama\",\"2. Alaska\",\"3. Arizona\",\"4. Arkansas\",\"5. California\",\"6. Colorado\",\"7. Connecticut\",\"8. Delaware\",\"9. Florida\",\"10. Georgia\"],[\"11. Hawaii\",\"12. Idaho\",\"13. Illinois\",\"14. Indiana\",\"15. Iowa\",\"16. Kansas\",\"17. Kentucky\",\"18. Louisiana\",\"19. Maine\",\"20. Maryland\"],[\"21. Massachusetts\",\"22. Michigan\",\"23. Minnesota\",\"24. Mississippi\",\"25. Missouri\",\"26. Montana\",\"27. Nebraska\",\"28. Nevada\",\"29. New Hampshire\",\"30. New Jersey\"],[\"31. New Mexico\",\"32. New York\",\"33. North Carolina\",\"34. North Dakota\",\"35. Ohio\",\"36. Oklahoma\",\"37. Oregon\",\"38. Pennsylvania\",\"39. Rhode Island\",\"40. South Carolina\"],[\"41. South Dakota\",\"42. Tennessee\",\"43. Texas\",\"44. Utah\",\"45. Vermont\",\"46. Virginia\",\"47. Washington\",\"48. West Virginia\",\"49. Wisconsin\",\"50. Wyoming\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th><\\/th>\\n      <th><\\/th>\\n      <th><\\/th>\\n      <th><\\/th>\\n      <th><\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"paging\":false,\"searching\":false,\"info\":false,\"columnDefs\":[{\"name\":\"Col1\",\"targets\":0},{\"name\":\"Col2\",\"targets\":1},{\"name\":\"Col3\",\"targets\":2},{\"name\":\"Col4\",\"targets\":3},{\"name\":\"Col5\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n:::\n\n\n## Estimation Using Simple Random Sampling\n\n::: cle2\n::: font80\n\n- **Population Mean ($\\mu$)**: Estimated using the sample mean.\n- **Population Total ($\\tau$)**: Estimated using the product of mean and population size.\n\n$$\\bar{y} = \\frac{1}{n} \\sum_{i=1}^n y_i$$\n$$\\hat{\\tau} = N \\cdot \\bar{y}$$\n\n:::\n:::\n\n## Variance Estimates in Sampling\n\n::: cle2\n::: font70\n\n::: row\n::: left\n\n**Variance of the Sample Mean ($V(\\bar{y})$)**:\n\n- The variance is calculated using:\n  $$ V(\\bar{y}) = \\frac{\\sigma^2}{n} \\left(\\frac{N-n}{N-1}\\right) $$\n- Adjusted for finite population:\n  $$ = \\left(1 - \\frac{n}{N}\\right) \\frac{s^2}{n} $$\n:::\n\n::: right\n\n**Sample Variance ($s^2$)**:\n  $$ s^2 = \\frac{1}{n-1} \\sum (y_i - \\bar{y})^2 $$\n\n**Expectation of Sample Variance**:\n  $$ E(s^2) = \\frac{N}{N-1} \\cdot \\sigma^2 $$\n\n\n:::\n:::\n\n:::\n:::\n\n## Variance of Estimated Total ($V(\\hat{\\tau})$)\n\n::: cle2\n::: font80\n\n- Adjusted for scaling by the population size:\n  $$ V(\\hat{\\tau}) = N^2 \\cdot V(\\bar{y}) $$\n- Which results in:\n  $$ = N^2 \\cdot \\left(1 - \\frac{n}{N}\\right) \\frac{s^2}{n} $$\n\n:::\n:::\n\n## Constructing Confidence Intervals\n\n::: cle2\n::: font60\n\nFor both the population mean ($\\mu$) and total ($\\tau$), use the respective variance calculations to construct confidence intervals, accounting for the finite population correction.\n\n- This approach ensures more accurate estimations by adjusting for the finite size of the population.\n\n**Note**:  When the population variance $\\sigma^2$ is unknown, we use $s^2$ as an estimator. However, to account for the finite population size, the sample variance $s^2$ should be multiplied by $\\frac{N-1}{N}$ to make it an unbiased estimator of $\\sigma^2$. This scaling helps adjust the variance estimate to reflect the true variability in the population more accurately.\n\n:::\n:::\n\n\n## \n\n::: font60\n> Example 3: The census population of each states in U.S.A in 2020 is listed below. Use the simple random sample we obtained in Example 2, estimate the average census population, $\\bar{y}$ of a state in the U.S.A., then compute the estimated variance of $\\bar{y}$. Do the same computation for the total census population for the whole 50 states.\n:::\n\n\n\n##\n\n\n\n##\n\n\n\n\n```{=html}\n<iframe width=\"1380\" height=\"1200\" src=\"https://ballotpedia.org/United_States_census,_2020\" title=\"Webpage example\"></iframe>\n```\n\n\n\n\n\n##\n\n\n<details><summary><red>Calculations</red></summary>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(1098163, 4661468, 2120220, 3963516, 5782171, 10725274, 11808848, 1963333, 1085407, 643503)\ny.bar <- mean(y)\ny.bar\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4385190\n```\n\n\n:::\n\n```{.r .cell-code}\ntau.hat <- 50 * y.bar\ntau.hat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 219259515\n```\n\n\n:::\n\n```{.r .cell-code}\ns2 <- sd(y)\ns2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4002803\n```\n\n\n:::\n:::\n\n\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}