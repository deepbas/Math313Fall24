{
  "hash": "0bdc94f552d924f45cdb3a7d1624b9e7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 37\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"MATH 313: Survey Design and Sampling\"\nauthor: \"\"\nformat:\n  revealjs:\n    html-math-method: mathjax\n    mathjax-url: \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js\"\n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: \n      src: chalkboard.json\n      eraser:\n        src: 'img/sponge.png'\n        radius: 20\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n## Estimation of Population Density and Size Using Inverse Sampling {.font80}\n\n::: cle7\nInverse sampling differs from direct sampling as it continues until a fixed number of tagged animals is recaptured. This method provides an unbiased estimator for population size $N$, using the fixed count of recaptured tagged animals to estimate the proportion of tagged animals in the population.\n:::\n\n## Mathematical Formulation of Inverse Sampling {.font80}\n\n::: cle12\n- **Proportion of tagged individuals**:\n  $$\n  \\hat{p} = \\frac{s}{n}\n  $$\n  where $s$ is fixed and $n$ is the number of total individuals captured during sampling.\n\n- **Estimator of $N$**:\n  $$\n  \\hat{N} = \\frac{n \\cdot t}{s}\n  $$\n  where $t$ is the number of animals tagged in the initial sample.\n:::\n\n## Variance and Error Estimation {.font80}\n\n::: cle7\n- **Variance of $\\hat{N}$**:\n  $$\n  \\hat{V}(\\hat{N}) = \\frac{t^2 \\cdot n \\cdot (n-s)}{s^2 \\cdot (s+1)}\n  $$\n  reflects the sample's randomness and the fixed nature of $s$.\n\n- **Error Bound**:\n  Using $V-P$ inequality for conservative error bounds in estimation.\n:::\n\n## Example: Wildlife Preserve Bird Population {.font60}\n\n> Authorities want to estimate the number of birds in a preserve. Initially, $t=150$ birds are tagged and released. Later, sampling continues until $35$ tagged birds are recaptured among $100$ total birds. Estimating $N$ involves using the derived formulas to handle randomness and provide reliable population estimates.\n\n## Estimating Population Density from Stocked Quadrats {.font80}\n\n::: cle12\nStocked quadrat sampling involves checking the presence or absence of a species, simplifying the data collection process but requiring careful handling of statistical estimates due to the binary nature of data (presence vs. absence).\n:::\n\n## Formulating the Stocked Quadrat Density Estimation {.font80}\n\n::: cle7\n- **Probability of presence** in a quadrat:\n  $$\n  P(\\text{unstocked}) = e^{-\\lambda a}\n  $$\n  where $\\lambda$ is the density per unit area and $a$ is the area of each quadrat.\n\n- **Estimator for $\\lambda$**:\n  $$\n  \\hat{\\lambda} = -\\frac{1}{a} \\ln\\left(\\frac{y}{m}\\right)\n  $$\n  derived from the proportion of unstocked quadrats in the sample.\n:::\n\n## Variance and Confidence Interval {.font80}\n\n::: cle12\n- **Variance of $\\hat{\\lambda}$**:\n  $$\n  \\hat{V}(\\hat{\\lambda}) = \\frac{1}{m a^2} (e^{\\hat{\\lambda} a} - 1)\n  $$\n\n- **Confidence Interval**:\n  Ensuring accuracy with $1-\\alpha$% bounds based on the variance.\n:::\n\n## Practical Example: Plantation Infected Trees Estimation {.font60}\n\n> In a 200-acre plantation, the presence of fusiform rust in trees is sampled over 20 quadrats of 0.5 acre each. The density and total number of infected trees are estimated, incorporating bounds on the estimation error.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}