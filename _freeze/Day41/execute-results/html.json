{
  "hash": "3fb0754f6be06862472985c433edd453",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 41\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"MATH 313: Survey Design and Sampling\"\nauthor: \"\"\nformat:\n  revealjs:\n    html-math-method: mathjax\n    mathjax-url: \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js\"\n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: \n      src: chalkboard.json\n      eraser:\n        src: 'img/sponge.png'\n        radius: 20\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n## Introduction to Bootstrap Methods {.font80}\n\n::: cle7\n- **Overview of Traditional Estimation**\n    - Traditionally, estimators use variance formulas for estimation.\n    - Standard errors are derived from these variances to construct confidence intervals, typically 95%.\n- **Challenges with Traditional Methods**\n    - Bias in variance estimates can occur under complex survey conditions.\n    - Difficulties arise in deriving closed-form expressions for variance in surveys involving clustering, stratification, and weighting.\n:::\n\n## Why Bootstrap? {.font80}\n\n::: cle5\n- **Advantages of Bootstrap**\n    - Bootstrap methods do not rely on variance formulas, reducing potential biases.\n    - These methods use resampling techniques to estimate the distribution of sample statistics directly.\n- **Bootstrap Approach**\n    - Involves drawing repeated samples from the survey data with replacement.\n    - Each resample is used to calculate estimates, building an empirical distribution of the estimator.\n:::\n\n## Implementing Bootstrap in R {.font80}\n\n::: cle8\n- **Setting Up in R**\n    - Utilize the `survey` package to create a survey design object.\n    - Convert the design object to a bootstrap design for resampling.\n- **Bootstrap Computation**\n    - Generate bootstrap replicates of the statistic of interest.\n    - Analyze the variability and stability of these estimates to gauge their reliability.\n:::\n\n\n## {.font70}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a vector of size 10\nobs <- c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50)\n\n# Define the number of bootstrap samples\nn_bootstraps <- 50\n\n# Generate bootstrap samples and compute their means\nset.seed(123)  # For reproducibility\nbootstrap_means <- replicate(n_bootstraps, {\n  sample_data <- sample(obs, replace = TRUE)\n  mean(sample_data)\n})\n\n# Calculate the original mean\noriginal_mean <- mean(obs)\noriginal_mean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 27.5\n```\n\n\n:::\n\n```{.r .cell-code}\nbootstrap_means # collection of bootstrapped means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 29.0 36.5 32.0 32.0 30.5 21.5 30.5 31.5 28.0 30.0 30.5 32.5 29.5 28.0 28.5\n[16] 36.5 37.0 35.5 37.0 31.0 21.0 31.5 29.0 14.5 31.5 24.0 28.0 21.5 30.5 31.0\n[31] 21.5 19.0 30.0 22.0 36.0 34.5 25.5 31.5 29.0 33.5 22.5 21.5 27.5 19.5 31.5\n[46] 27.5 31.0 35.0 34.5 25.5\n```\n\n\n:::\n\n```{.r .cell-code}\nmean(bootstrap_means) # mean of the bootstrapped means\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28.97\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Visualizing Bootstrap Results {.font80}\n\n::: cle13\n- **Dot Plots**\n    - Use dot plots to visualize the distribution of bootstrap estimates.\n    - Adjust dot size and stack direction to avoid overlap and improve clarity.\n- **Density Curves**\n    - Overlay density curves on dot plots to highlight the overall distribution shape and central tendency.\n:::\n\n\n##  {.font80}\n\n::: cle2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(survey)\ndata(api) \ndesign <- svydesign(ids = ~dnum, weights = ~pw, data = apiclus1)\nsummary(design)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1 - level Cluster Sampling design (with replacement)\nWith (15) clusters.\nsvydesign(ids = ~dnum, weights = ~pw, data = apiclus1)\nProbabilities:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.02954 0.02954 0.02954 0.02954 0.02954 0.02954 \nData variables:\n [1] \"cds\"      \"stype\"    \"name\"     \"sname\"    \"snum\"     \"dname\"   \n [7] \"dnum\"     \"cname\"    \"cnum\"     \"flag\"     \"pcttest\"  \"api00\"   \n[13] \"api99\"    \"target\"   \"growth\"   \"sch.wide\" \"comp.imp\" \"both\"    \n[19] \"awards\"   \"meals\"    \"ell\"      \"yr.rnd\"   \"mobility\" \"acs.k3\"  \n[25] \"acs.46\"   \"acs.core\" \"pct.resp\" \"not.hsg\"  \"hsg\"      \"some.col\"\n[31] \"col.grad\" \"grad.sch\" \"avg.ed\"   \"full\"     \"emer\"     \"enroll\"  \n[37] \"api.stu\"  \"fpc\"      \"pw\"      \n```\n\n\n:::\n:::\n\n\n:::\n\n##  {.font80}\n\n::: cle6\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbootstrap_design <- as.svrepdesign(design, type = \"bootstrap\", replicates = 1000)\nsummary(bootstrap_design)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCall: as.svrepdesign.default(design, type = \"bootstrap\", replicates = 1000)\nSurvey bootstrap with 1000 replicates.\nVariables: \n [1] \"cds\"      \"stype\"    \"name\"     \"sname\"    \"snum\"     \"dname\"   \n [7] \"dnum\"     \"cname\"    \"cnum\"     \"flag\"     \"pcttest\"  \"api00\"   \n[13] \"api99\"    \"target\"   \"growth\"   \"sch.wide\" \"comp.imp\" \"both\"    \n[19] \"awards\"   \"meals\"    \"ell\"      \"yr.rnd\"   \"mobility\" \"acs.k3\"  \n[25] \"acs.46\"   \"acs.core\" \"pct.resp\" \"not.hsg\"  \"hsg\"      \"some.col\"\n[31] \"col.grad\" \"grad.sch\" \"avg.ed\"   \"full\"     \"emer\"     \"enroll\"  \n[37] \"api.stu\"  \"fpc\"      \"pw\"      \n```\n\n\n:::\n\n```{.r .cell-code}\nmean_estimate <- svymean(~api00, bootstrap_design)\nmean_estimate\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        mean     SE\napi00 644.17 24.071\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## {.font70}\n\n::: cle9\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(113)\nreplicate_estimates <- replicate(1000, expr = {\n    single_sample <- sample(1:nrow(apiclus1), replace = TRUE)\n    svymean(~api00, svydesign(ids = ~dnum, weights = ~pw, data = apiclus1[single_sample, ]))\n}, simplify = FALSE)\n\nreplicate_estimates[1:6] \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n        mean     SE\napi00 634.38 24.291\n\n[[2]]\n        mean     SE\napi00 642.17 31.605\n\n[[3]]\n       mean     SE\napi00 637.4 24.491\n\n[[4]]\n        mean     SE\napi00 638.52 20.391\n\n[[5]]\n        mean     SE\napi00 638.14 24.211\n\n[[6]]\n        mean     SE\napi00 647.31 23.668\n```\n\n\n:::\n:::\n\n\n:::\n\n## {.font70}\n\n::: cle9\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the list of estimates to a vector\nestimate_values <- sapply(replicate_estimates, function(est) coef(est))\nestimate_values %>% head(100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   api00    api00    api00    api00    api00    api00    api00    api00 \n634.3825 642.1694 637.4044 638.5246 638.1366 647.3115 647.3661 639.8470 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n648.5410 632.2568 642.6393 638.1530 644.0874 638.0820 643.3005 636.0000 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n647.8142 636.3005 643.9344 646.3224 639.5847 645.2842 657.2678 640.7158 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n656.1694 643.5847 642.3607 642.7760 649.5137 653.8361 656.1967 643.5301 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n645.5956 641.1585 652.3661 647.2131 636.3989 650.8087 648.2350 647.2404 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n643.6120 645.6721 639.9016 637.1694 647.3333 643.8689 640.3060 642.0601 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n645.7486 642.7814 651.0765 638.4645 647.2514 653.8470 638.2404 645.8689 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n645.3224 634.3169 645.5246 649.1913 648.2077 649.2842 644.6230 644.6503 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n644.8579 634.7268 645.9727 644.9836 663.5902 642.2568 640.4372 631.4372 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n641.8197 624.6503 647.1585 636.7705 652.3825 636.6995 638.4317 649.0710 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n641.4426 634.6557 637.2240 638.2678 643.2623 636.7322 645.6885 647.5137 \n   api00    api00    api00    api00    api00    api00    api00    api00 \n631.7650 640.7213 643.8962 647.0492 634.2896 648.8579 641.0000 635.7049 \n   api00    api00    api00    api00 \n653.0164 643.6940 645.6612 640.1421 \n```\n\n\n:::\n:::\n\n\n:::\n\n\n## {.font70}\n\n::: panel-tabset\n\n### Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Day41_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n\n\n\n### Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate mean and SE\nbootstrap_mean <- mean(estimate_values)\nbootstrap_se <- sd(estimate_values) \n\n# Plotting the bootstrap estimates\nlibrary(ggplot2)\nggplot(data = data.frame(estimate_values), aes(x = estimate_values)) +\n    geom_dotplot(binwidth = 0.8, stackdir = \"up\", dotsize = 0.5, fill = \"maroon\", col = \"gold\") +\n    geom_density(aes(y = ..scaled..), fill = \"lightblue\", alpha = 0.2, adjust = 1) +  \n    geom_vline(xintercept = bootstrap_mean, color = \"blue\", linetype = \"dashed\") +\n    annotate(\"text\", x = bootstrap_mean + 5, y = 0.8, label = sprintf(\"Mean = %.2f\\nSE = %.2f\",\nbootstrap_mean, bootstrap_se), color = \"blue\") +\n    xlab(\"Bootstrap Estimates\") +\n    ggtitle(\"Distribution of API Score Estimates\")\n```\n:::\n\n\n\n:::\n\n\n\n\n##  {.font60}\n\n> The American Housing Survey tracks housing characteristics in the U.S., including ownership costs and house values across 47 metropolitan statistical areas (MSAs). The 2002 survey sampled 13 MSAs, providing data on typical monthly ownership costs and house values for 2002 and 1994.\n\n1. **Mean Value 2002**: Simulate a bootstrap confidence interval for the mean typical house value in 2002.\n2. **Median Value 2002**: Simulate a bootstrap confidence interval for the median typical house value in 2002.\n3. **Ratio of Mean Values 2002 to 1994**: Simulate a bootstrap confidence interval for the ratio of mean house values from 2002 compared to 1994.\n\n\n## {.font60}\n\n\n<img src=\"images/Day41-1.png\" style=\"display: block; margin: auto;\" width=\"80%\"  loading=\"lazy\" decoding=\"async\">\n\n\n",
    "supporting": [
      "Day41_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}