{
  "hash": "9825b7cbc893787cbbec75c245b74958",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Day 34\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"MATH 313: Survey Design and Sampling\"\nauthor: \"\"\nformat:\n  revealjs:\n    html-math-method: mathjax\n    mathjax-url: \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/3.2.2/MathJax.js\"\n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: \n      src: chalkboard.json\n      eraser:\n        src: 'img/sponge.png'\n        radius: 20\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n\n## Introduction to Population Estimation {.font80}\n\n::: cle7\nExploring different methods to estimate population sizes in various contexts such as wildlife, events, and quality assurance.\n:::\n\n## Direct Sampling Method {.font80}\n\n::: cle12\nInvolves tagging and later recapturing animals to estimate total population. The formula used is:\n$$\n\\hat{N} = \\frac{n \\times t}{s}\n$$\nwhere $n$ is the size of the second sample, $t$ is the number of tagged animals, and $s$ is the number of tagged animals recaptured.\n:::\n\n## Inverse Sampling {.font80}\n\n::: cle7\nA variant of direct sampling that continues until a preset number of tagged animals are recaptured, with the population estimate given by the same formula as direct sampling.\n:::\n\n## Density Estimation Method {.font80}\n\n::: cle12\nInvolves estimating animal density per unit area and multiplying by the total area to estimate population size:\n$$\n\\hat{N} = \\hat{\\lambda} \\times A\n$$\nwhere $\\hat{\\lambda}$ is the estimated density and $A$ is the area.\n:::\n\n## Adaptive Sampling {.font80}\n\n::: cle7\nEnhances density estimates by incorporating high-density clusters found during initial sampling, adapting the approach dynamically.\n:::\n\n## Example 1: Wildlife Conservation {.font60}\n\n> A wildlife reserve estimates the population of a bird species using direct sampling. The first sample tags 300 birds, and a second sample of 200 birds recaptures 62 tagged individuals.\n\n<img src=\"images/Day32-1.png\" style=\"display: block; margin: auto;\" width=\"80%\" loading=\"lazy\" decoding=\"async\">\n\n## Example 2: Event Attendance Estimation {.font60}\n\n> An event organizer uses adaptive sampling to estimate the number of attendees in various sections of a venue, initially counting in a smaller focused area and adjusting based on crowd density.\n\n<img src=\"images/Day32-2.png\" style=\"display: block; margin: auto;\" width=\"80%\" loading=\"lazy\" decoding=\"async\">\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}